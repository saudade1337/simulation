from __future__ import annotations
import random
from entities.creatures import Herbivore, Predator
from entities.static_objects import Grass
from world.map import Map
from simulation.simulation import Simulation
from simulation.actions import move_all_creatures, spawn_grass_randomly, world_statistics, cleanup_dead


# ----------------------------
# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∏—Ä–∞
# ----------------------------

def create_test_world(width: int = 30, height: int = 30) -> Map:
    """–°–æ–∑–¥–∞—ë—Ç –∫–∞—Ä—Ç—É –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –µ—ë –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏"""
    world = Map(width, height)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–≤—É üåø
    for _ in range(10):
        pos = (random.randint(0, width - 1), random.randint(0, height - 1))
        if world.is_empty(pos):
            world.add_entity(Grass(pos))

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö üêÑ
    for _ in range(60):
        pos = (random.randint(0, width - 1), random.randint(0, height - 1))
        if world.is_empty(pos):
            world.add_entity(Herbivore(pos))

    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∏—â–Ω–∏–∫–æ–≤ ü¶Å
    for _ in range(30):
        pos = (random.randint(0, width - 1), random.randint(0, height - 1))
        if world.is_empty(pos):
            world.add_entity(Predator(pos))

    return world


# ----------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
# ----------------------------

def main():
    # 1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –º–∏—Ä
    world = create_test_world()

    # 2Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º —Å–∏–º—É–ª—è—Ü–∏—é
    sim = Simulation(world)

    # 3Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º "–ø—Ä–∞–≤–∏–ª–∞" ‚Äî —Ñ—É–Ω–∫—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –∫–∞–∂–¥—ã–π —Ö–æ–¥
    sim.add_turn_action(move_all_creatures)     # –≤—Å–µ —Å—É—â–µ—Å—Ç–≤–∞ –¥–µ–ª–∞—é—Ç —Ö–æ–¥
    sim.add_turn_action(spawn_grass_randomly)  # –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–∞—è —Ç—Ä–∞–≤–∞
    sim.add_turn_action(cleanup_dead)           # —É–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã—Ö
    sim.add_turn_action(world_statistics)       # –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    # 4Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    sim.start(delay=1.5)  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ö–æ–¥–∞–º–∏


if __name__ == "__main__":
    main()
