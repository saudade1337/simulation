from __future__ import annotations
from typing import List
import random
from abc import ABC, abstractmethod

from .entity import Entity, Pos
from .static_objects import Grass


class Creature(Entity, ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∂–∏–≤—ã—Ö —Å—É—â–µ—Å—Ç–≤"""
    def __init__(self, pos: Pos, hp: int, speed: int):
        super().__init__(pos)
        self.hp = hp
        self.speed = speed
        self.last_action = '—Ä–æ–¥–∏–ª—Å—è' # –ü–æ—Å–ª–µ–¥–Ω–µ –¥–µ–π—Å—Ç–≤–∏–µ

    @property
    def is_alive(self) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ –∂–∏–≤–æ–µ"""
        return self.hp > 0

    @abstractmethod
    def make_move(self, world: "Map", log: list[str]):
        """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ –∑–∞ –æ–¥–∏–Ω —Ö–æ–¥"""
        pass


class Herbivore(Creature):
    """üêÑ –¢—Ä–∞–≤–æ—è–¥–Ω–æ–µ - –∏—â–µ—Ç –∏ –µ—Å—Ç—å —Ç—Ä–∞–≤—É"""
    def __init__(self, pos: Pos, hp: int = 10, speed: int = 1):
        super().__init__(pos, hp, speed)

    @property
    def symbol(self) -> str:
        return 'üêÑ'

    def make_move(self, world: "Map", log: List[str]):
        from world.pathfinding import bfs_path  # –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
        target = world.find_nearest(self.pos, Grass)

        if not target:
            self._random_step(world, log)
            return

        path = bfs_path(world, self.pos, target.pos)
        if not path:
            self._random_step(world, log)
            return

        if len(path) <= 2:
            # —Å—Ç–æ–∏—Ç —Ä—è–¥–æ–º —Å —Ç—Ä–∞–≤–æ–π ‚Äî –µ—Å—Ç
            self.hp += target.nutrition
            world.remove_entity(target)
            log.append(f"üêÑ –Ω–∞ {self.pos} —Å—ä–µ–ª üåø –Ω–∞ {target.pos} (+{target.nutrition} HP)")
        else:
            new_pos = path[1]
            if world.is_empty(new_pos):
                world.move_entity(self, new_pos)
                log.append(f"üêÑ –∏–¥—ë—Ç –∫ üåø: {self.pos} ‚Üí {new_pos}")
            else:
                self._random_step(world, log)

    def _random_step(self, world: "Map", log: List[str]):
        """–°–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ª–∏."""
        free = [p for p in world.neighbors(self.pos) if world.is_empty(p)]
        if free:
            new = random.choice(free)
            world.move_entity(self, new)
            log.append(f"üêÑ –±–ª—É–∂–¥–∞–µ—Ç: {self.pos} ‚Üí {new}")


class Predator(Creature):
    """ü¶Å –•–∏—â–Ω–∏–∫ - –æ—Ö–æ—Ç–∏—Ç—Å—è –∏ –∞—Ç–∞–∫—É–µ—Ç —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö"""
    def __init__(self, pos: Pos, hp: int = 15, speed: int = 1, attack: int = 5):
        super().__init__(pos, hp, speed)
        self.attack = attack

    @property
    def symbol(self) -> str:
        return "ü¶Å"

    def make_move(self, world: "Map", log: List[str]):
        from world.pathfinding import bfs_path

        prey = world.find_nearest(self.pos, Herbivore)
        if not prey:
            self._random_step(world, log)
            return

        path = bfs_path(world, self.pos, prey.pos)
        if not path:
            self._random_step(world, log)
            return

        if len(path) <= 2:
            # –∞—Ç–∞–∫–∞
            prey.hp -= self.attack
            log.append(f"ü¶Å –∞—Ç–∞–∫—É–µ—Ç üêÑ –Ω–∞ {prey.pos} (HP –∂–µ—Ä—Ç–≤—ã = {prey.hp})")
            if prey.hp <= 0:
                world.remove_entity(prey)
                log.append(f"ü¶Å —Å—ä–µ–ª üêÑ –Ω–∞ {prey.pos}")
        else:
            new_pos = path[1]
            if world.is_empty(new_pos):
                world.move_entity(self, new_pos)
                log.append(f"ü¶Å –¥–≤–∏–∂–µ—Ç—Å—è –∫ üêÑ: {self.pos} ‚Üí {new_pos}")
            else:
                self._random_step(world, log)

    def _random_step(self, world: "Map", log: List[str]):
        """–°–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∂–µ—Ä—Ç–≤—ã."""
        free = [p for p in world.neighbors(self.pos) if world.is_empty(p)]
        if free:
            new = random.choice(free)
            world.move_entity(self, new)
            log.append(f"ü¶Å –±–ª—É–∂–¥–∞–µ—Ç: {self.pos} ‚Üí {new}")